name: Cesium Native CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-macos:
    runs-on: macos-latest
    env:
      # Set environment for Android NDK if needed (not used on macOS)
      ANDROID_NDK_HOME: ""
    steps:
      - uses: actions/checkout@v4
        # Benutze neueste Checkout-Action (schneller & aktueller)
      - name: Install CMake
        uses: lukka/get-cmake@latest
        # Holt neueste CMake-Version (lukka/get-cmake cached automatisch)
      - name: Install NASM (macOS)
        run: brew install nasm
        # Installiert NASM via Homebrew, damit libjpeg-Turbo optimiert bauen kann :contentReference[oaicite:19]{index=19}
      - name: Configure (macOS)
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
        # Beispielhafter CMake-Konfigurationsaufruf
      - name: Build (macOS)
        run: cmake --build build --target install
      - name: Upload artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: cesium-native-macos
          path: build/install/**
        # Hochladen mit v4 (v3 deprecated):contentReference[oaicite:20]{index=20}; 'include-hidden-files: true' falls nötig

  build-windows:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: 'C:\vcpkg'   # Beispiel für vcpkg Pfad
    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
        # Setzt MSVC Developer Command Prompt (benötigt für cl.exe)
      - name: Install CMake
        uses: lukka/get-cmake@latest
      - name: Install NASM (Windows)
        shell: pwsh
        run: |
          choco install nasm -y
          echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # Installiert NASM via Chocolatey und fügt es dem PATH hinzu :contentReference[oaicite:21]{index=21}
      - name: Configure (Windows)
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DVCPKG_ROOT="%VCPKG_ROOT%"
        shell: cmd
      - name: Build (Windows)
        run: cmake --build build --config Release --target INSTALL
        shell: cmd
      - name: Upload artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: cesium-native-windows
          path: build\install\**
        # Achtung: Backslashes im Pfad funktionieren, aber ggf. als String quoten.
        # Upload mit v4 – jeder Job hat eindeutigen Artefakt-Namen (hier windows) :contentReference[oaicite:22]{index=22}

  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install CMake
        uses: lukka/get-cmake@latest
      - name: Install Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 33
          ndk: false  # Wir installieren NDK separat
      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
        # Lädt Android NDK r26d herunter und setzt ANDROID_NDK_HOME :contentReference[oaicite:23]{index=23}
      - name: Install NASM (Ubuntu for Android)
        run: sudo apt-get update && sudo apt-get install -y nasm
        # Installiert NASM, damit z.B. libjpeg-turbo Assembly nutzen kann (auch beim Cross-Compile)
      - name: Configure (Android)
        run: |
          cmake -B build-android -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake" \
            -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-33
      - name: Build (Android)
        run: cmake --build build-android --target install
      - name: Upload artifact (Android)
        uses: actions/upload-artifact@v4
        with:
          name: cesium-native-android
          path: build-android/install/**
        # Artefakt für Android-Build hochladen (v4 verwendet)
