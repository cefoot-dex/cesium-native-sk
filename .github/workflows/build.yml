name: Build Cesium Native (Cross-Platform)

# Trigger on push, PR, and manual dispatch
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # Job for macOS build
  build-macos:
    name: Build on macOS (Cesium Native)
    runs-on: macos-latest
    env:
      # Set vcpkg root path for CMake to find dependencies:contentReference[oaicite:0]{index=0}
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
    steps:
      # Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # Install NASM and Ninja via Homebrew (for assembly optimizations & Ninja build):contentReference[oaicite:1]{index=1}
      - name: Install build tools (Homebrew)
        run: |
          brew update
          brew install nasm ninja
        # NASM is needed for optimal JPEG decoding performance:contentReference[oaicite:2]{index=2}; Ninja is the chosen CMake generator

      # Install vcpkg (dependency manager):contentReference[oaicite:3]{index=3}
      - name: Install vcpkg
        run: |
          git clone --depth 1 https://github.com/microsoft/vcpkg.git vcpkg
          ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
        # Clone vcpkg and bootstrap it to manage Cesium Native dependencies:contentReference[oaicite:4]{index=4}

      # Configure CMake for macOS build
      - name: Configure CMake (macOS)
        run: cmake -B build -S . -G Ninja -DCMAKE_BUILD_TYPE=Release \
                 -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
                 -DCESIUM_USE_EZVCPKG=OFF
        # Use Ninja generator and vcpkg toolchain:contentReference[oaicite:5]{index=5}; disable internal ezvcpkg to use our vcpkg install

      # Build the project using Ninja
      - name: Build (macOS)
        run: cmake --build build --parallel
        # Compile Cesium Native on macOS (Release configuration)

      # Install the library and headers to a package directory
      - name: Install library (macOS)
        run: cmake --install build --prefix "$GITHUB_WORKSPACE/install"
        # Using CMake install to gather built library (.dylib) and headers into 'install' folder

      # Upload the built library as a GitHub Actions artifact
      - name: Upload artifact (macOS)
        uses: actions/upload-artifact@v4.6.2
        with:
          name: cesium-native-macos
          path: install
        # Provides the macOS build artifact (e.g., .dylib and includes) for download

  # Job for Windows build
  build-windows:
    name: Build on Windows (Cesium Native)
    runs-on: windows-latest
    env:
      # Set vcpkg root path (Windows requires backslashes in path)
      VCPKG_ROOT: "${{ github.workspace }}\\vcpkg"
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # Set up Visual C++ build environment (MSVC) for command-line use
      - name: Setup MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
        # Activates the Developer Command Prompt (vcvars) for 64-bit MSVC tools

      # Install NASM and Ninja via Chocolatey (for assembly optimization & Ninja):contentReference[oaicite:6]{index=6}
      - name: Install build tools (Chocolatey)
        run: |
          choco install -y nasm
          choco install -y ninja
        # NASM for optimized JPEG decoding on Windows:contentReference[oaicite:7]{index=7}; Ninja for faster multi-config builds

      # Install vcpkg on Windows and bootstrap it:contentReference[oaicite:8]{index=8}
      - name: Install vcpkg
        shell: cmd
        run: |
          git clone --depth 1 https://github.com/microsoft/vcpkg.git vcpkg
          vcpkg\bootstrap-vcpkg.bat -disableMetrics
        # Clone and build vcpkg.exe (manages dependencies):contentReference[oaicite:9]{index=9}

      # Configure CMake for Windows build
      - name: Configure CMake (Windows)
        shell: cmd
        run: cmake -B build -S . -G Ninja -DCMAKE_BUILD_TYPE=Release ^
                   -DCMAKE_TOOLCHAIN_FILE=%VCPKG_ROOT%\scripts\buildsystems\vcpkg.cmake ^
                   -DCESIUM_USE_EZVCPKG=OFF
        # Generate Ninja build files with vcpkg toolchain:contentReference[oaicite:10]{index=10}; using MSVC compiler (via vcvars), NASM enabled

      # Build the project with Ninja (using MSVC)
      - name: Build (Windows)
        shell: cmd
        run: cmake --build build --parallel
        # Compile Cesium Native on Windows (Release mode); results in .lib/.dll outputs

      # Install the library and headers to a package directory
      - name: Install library (Windows)
        shell: cmd
        run: cmake --install build --prefix "%GITHUB_WORKSPACE%\install"
        # Collect the built library (.dll and .lib) and headers into 'install' directory

      # Upload the Windows build artifact (library + headers)
      - name: Upload artifact (Windows)
        uses: actions/upload-artifact@v4.6.2
        with:
          name: cesium-native-windows
          path: install
        # Provides the Windows build artifact (e.g., DLL and import LIB) for download

  # Job for Android (cross-compile on Linux)
  build-android:
    name: Build for Android (Cesium Native)
    runs-on: ubuntu-latest
    env:
      # Set vcpkg root path and Android NDK path for cross-compiling
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      ANDROID_NDK_HOME: ${{ github.workspace }}/android-ndk
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # Install required packages: compiler, Ninja, NASM, and tools to fetch NDK
      - name: Install dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build nasm unzip wget
        # Includes g++ and make tools, Ninja for CMake, NASM for optimizations:contentReference[oaicite:11]{index=11}

      # Download and set up Android NDK (needed for cross-compiling):contentReference[oaicite:12]{index=12}
      - name: Download Android NDK
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r26d-linux.zip -O ndk.zip
          unzip -q ndk.zip
          mv android-ndk-r26d "$ANDROID_NDK_HOME"
        # Obtains NDK r26d and defines ANDROID_NDK_HOME for the toolchain:contentReference[oaicite:13]{index=13}

      # Install vcpkg and bootstrap (for Android dependencies):contentReference[oaicite:14]{index=14}
      - name: Install vcpkg
        run: |
          git clone --depth 1 https://github.com/microsoft/vcpkg.git vcpkg
          ./vcpkg/bootstrap-vcpkg.sh -disableMetrics

      # (Optional) Pre-install dependencies for Android via vcpkg manifest
      - name: Install dependencies via vcpkg (Android)
        run: ./vcpkg/vcpkg install --triplet arm64-android
        # Pre-build all vcpkg dependencies for Android/arm64 (using vcpkg manifest and triplet):contentReference[oaicite:15]{index=15}

      # Configure CMake for Android cross-build
      - name: Configure CMake (Android)
        run: cmake -B build -S . -G Ninja -DCMAKE_BUILD_TYPE=Release \
                 -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
                 -DVCPKG_TARGET_TRIPLET=arm64-android -DCESIUM_USE_EZVCPKG=OFF
        # Use vcpkg Android toolchain via triplet for ARM64 (Meta Quest):contentReference[oaicite:16]{index=16}. 
        # This sets CMAKE_SYSTEM_NAME=Android and uses ANDROID_NDK_HOME for cross-compiling:contentReference[oaicite:17]{index=17}.

      # Build the project (cross-compile to Android ARM64)
      - name: Build (Android)
        run: cmake --build build --parallel
        # Compile Cesium Native for Android (outputs .so or .a libraries for ARM64)

      # Install the library and headers to a package directory
      - name: Install library (Android)
        run: cmake --install build --prefix "$GITHUB_WORKSPACE/install"
        # Gather the Android library (e.g., .so or static .a) and headers into 'install' directory

      # Upload the Android build artifact
      - name: Upload artifact (Android)
        uses: actions/upload-artifact@v4.6.2
        with:
          name: cesium-native-android
          path: install
        # Provides the Android build artifact (e.g., .so or .a plus headers) for download

      # Note: To create an Android plugin (for Meta Quest), you may need to build a shared library (.so) 
      # that wraps Cesium Native. This can be done by writing a small CMake or NDK build for your 
      # own C++ bridge (e.g., CesiumBridge.cpp) and linking against the static Cesium Native libs.
      # Using the Android NDK toolchain file in CMake or the vcpkg triplet ensures the correct ABI and platform.
      # The above steps prepare all necessary libraries; you can then compile your plugin code into an .so 
      # for Unity/StereoKit (using arm64-v8a ABI). Ensure to use the same NDK and toolchain settings for consistency.
